{
  "042": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 1,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`SELECT *`",
        ""
      ]
    ],
    "context": "Oh dear, what happened? It seems that I am the only survivor of the air crash. Wow, there are some villages on this island.\n\n```sql\nSELECT *\nFROM village\n```",
    "statement": "Copy-paste the previous query. After the star `*`, add a comma and the given formula. Execute the complete query.",
    "salt": "042",
    "formula": "salt_042(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM village",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>villageid</th>\n            <th>name</th>\n            <th>chief</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Monkeycity</td>\n            <td>1</td>\n            <td>761729108008</td>\n            <td>279644058721993</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Cucumbertown</td>\n            <td>6</td>\n            <td>690325653982</td>\n            <td>279644058721993</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "279644058721993"
      }
    ]
  },
  "279644058721993": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 2,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`SELECT *`",
        ""
      ]
    ],
    "context": "It seems there are a few people living in these villages.",
    "statement": "How can you see a list of all inhabitants?",
    "salt": "002",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Paul Bakerman</td>\n            <td>1</td>\n            <td>m</td>\n            <td>baker</td>\n            <td>850</td>\n            <td>friendly</td>\n            <td>894147374131</td>\n            <td>130877018053621</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>130877018053621</td>\n        </tr>\n</table>\nTotal: 19 rows affected.",
        "token": "130877018053621"
      }
    ]
  },
  "130877018053621": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 3,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE`",
        ""
      ],
      [
        "Comparison operator `=`",
        ""
      ]
    ],
    "context": "Woah, so many people!\n\nMan! I'm hungry. I will go and find a butcher to ask for some free sausages.\n\n```sql\nSELECT *\nFROM inhabitant\nWHERE job = 'butcher'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "048",
    "formula": "salt_048(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant A\nWHERE job = 'butcher'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>6</td>\n            <td>Gerry Slaughterer</td>\n            <td>2</td>\n            <td>m</td>\n            <td>butcher</td>\n            <td>4850</td>\n            <td>evil</td>\n            <td>200228709826</td>\n            <td>279073832771282</td>\n        </tr>\n        <tr>\n            <td>7</td>\n            <td>Peter Slaughterer</td>\n            <td>3</td>\n            <td>m</td>\n            <td>butcher</td>\n            <td>3250</td>\n            <td>evil</td>\n            <td>149631755589</td>\n            <td>279073832771282</td>\n        </tr>\n</table>\nTotal: 4 rows affected.",
        "token": "279073832771282"
      }
    ]
  },
  "279073832771282": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 4,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE`",
        ""
      ],
      [
        "Comparison operator `=`",
        ""
      ]
    ],
    "context": "– There you are! Enjoy your meal! But take care of yourself. As long as you are unarmed, stay away from villains. Not everyone on this island is friendly.  \n– Thank you, Edward!",
    "statement": "Okay, let's see who is friendly on this island...",
    "salt": "023",
    "formula": "salt_023(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Paul Bakerman</td>\n            <td>1</td>\n            <td>m</td>\n            <td>baker</td>\n            <td>850</td>\n            <td>friendly</td>\n            <td>894147374131</td>\n            <td>50980998180879</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>50980998180879</td>\n        </tr>\n</table>\nTotal: 11 rows affected.",
        "token": "50980998180879"
      }
    ]
  },
  "51507010066455": {
    "kind": "hint",
    "task_number": 4,
    "text": "Some inhabitants are neither friendly or evil.",
    "query": "SELECT *\n     , salt_023(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state != 'evil'"
  },
  "48044556087693": {
    "kind": "hint",
    "task_number": 4,
    "text": "Filter out the evil inhabitants, not the friendly ones.",
    "query": "SELECT *\n     , salt_023(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'evil'"
  },
  "37598288701617": {
    "kind": "hint",
    "task_number": 4,
    "text": "Filter out the evil inhabitants.",
    "query": "SELECT *\n     , salt_023(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant"
  },
  "50980998180879": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 5,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE`",
        ""
      ],
      [
        "Boolean operator `AND`",
        ""
      ]
    ],
    "context": "There is no way around getting a sword for myself.",
    "statement": "Now try to find a friendly weaponsmith to forge you one.\n\n_Tip._ You can combine predicates in the `WHERE` clause with `AND`.",
    "salt": "060",
    "formula": "salt_060(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job = 'weaponsmith'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>111873735423475</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "111873735423475"
      }
    ]
  },
  "111873735423475": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 6,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE`",
        ""
      ],
      [
        "Comparison operator `LIKE`",
        ""
      ]
    ],
    "context": "Hm, that's very few.",
    "statement": "Maybe other friendly smiths can help you out, e.g. a blacksmith.\n\n_Tip._ Try out: job LIKE '%smith' to find all inhabitants whose job ends with 'smith' (% is a wildcard for any number of characters).",
    "salt": "069",
    "formula": "salt_069(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job LIKE '%smith'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>71849070099607</td>\n        </tr>\n        <tr>\n            <td>10</td>\n            <td>Peter Drummer</td>\n            <td>1</td>\n            <td>m</td>\n            <td>smith</td>\n            <td>600</td>\n            <td>friendly</td>\n            <td>243111385149</td>\n            <td>71849070099607</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "71849070099607"
      }
    ]
  },
  "70761173541257": {
    "kind": "hint",
    "task_number": 6,
    "text": "Keep all villagers whose job's name ends with 'smith' (e.g., 'smith', 'blacksmith', etc.).",
    "query": "SELECT *\n     , salt_069(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job LIKE 'smith'"
  },
  "77405320603816": {
    "kind": "hint",
    "task_number": 6,
    "text": "Filter out the villagers whose job's name doesn't ends with 'smith'.",
    "query": "SELECT *\n     , salt_069(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly'"
  },
  "73618022250895": {
    "kind": "hint",
    "task_number": 6,
    "text": "Filter out the villagers which are not friendly.",
    "query": "SELECT *\n     , salt_069(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE job LIKE '%smith'"
  },
  "71849070099607": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 7,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`INSERT`",
        ""
      ]
    ],
    "context": "That looks better! I will go and visit those smiths.\n\n– Hi stranger! Where are you going? I'm Paul, I'm the major of Monkeycity. I will go ahead and register you as a citizen.\n\n```sql\nINSERT INTO inhabitant (name, villageid, gender, job, gold, state) VALUES ('Stranger', 1, '?', '?', 0, '?')\n```\n\n– No need to call me stranger!",
    "statement": "First, execute the `INSERT` statement. Then, look for your personid.\n\n_Tip._ In former queries, the * stands for: all columns. Instead of the star, you can also address one or more columns (separated by a comma) and you will only get the columns you need.",
    "salt": "090",
    "formula": "salt_090(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\n\nSELECT personid\nFROM inhabitant\nWHERE name = 'Stranger';",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>20</td>\n            <td>30525141563126</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "30525141563126"
      }
    ]
  },
  "29469479875314": {
    "kind": "hint",
    "task_number": 7,
    "text": "Oops, it seems you have executed the `INSERT` statement twice or more. Execute the following queries to cancel all these insertions: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', 19)",
    "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\nSELECT personid\n     , salt_090(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';"
  },
  "28936146647069": {
    "kind": "hint",
    "task_number": 7,
    "text": "Oops, it seems you have executed the `INSERT` statement twice or more. Execute the following queries to cancel all these insertions: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', 19)",
    "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\nSELECT personid\n     , salt_090(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';",
    "salt": "090"
  },
  "27750710965709": {
    "kind": "hint",
    "task_number": 7,
    "text": "Oops, it seems you have executed the `INSERT` statement twice or more. Execute the following queries to cancel all these insertions: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', 19)",
    "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\nSELECT personid\n     , salt_090(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';",
    "salt": "090"
  },
  "27856316173838": {
    "kind": "hint",
    "task_number": 7,
    "text": "Oops, it seems you have executed the `INSERT` statement twice or more. Execute the following queries to cancel all these insertions: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', 19)",
    "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\nSELECT personid\n     , salt_090(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';",
    "salt": "090"
  },
  "30525141563126": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 8,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE` (again)",
        ""
      ],
      [
        "Comparison operator `=`",
        ""
      ]
    ],
    "context": "– Hi Ernest! How much is a sword?  \n– I can offer to make you a sword for 150 gold. That's the cheapest you will find!",
    "statement": "How much gold do you have?",
    "salt": "099",
    "formula": "salt_099(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT gold\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>0</td>\n            <td>8733222069916</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "8733222069916"
      }
    ]
  },
  "14736651824382": {
    "kind": "hint",
    "task_number": 8,
    "text": "Restrict the result to the Stranger's row (personid: 20).",
    "query": "SELECT personid, gold\n     , salt_099(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant"
  },
  "8733222069916": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 9,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`WHERE` (again)",
        ""
      ],
      [
        "`IS NULL`",
        ""
      ]
    ],
    "context": "Damn! No mon, no fun. There has to be another option to earn gold other than going to work. Maybe I could collect ownerless items and sell them!",
    "statement": "Make a list of all items that don't belong to anyone.\n\n_Tip._ You can recognize ownerless items by: WHERE owner IS NULL",
    "salt": "073",
    "formula": "salt_073(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM item\nWHERE owner IS NULL",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>owner</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>bucket</td>\n            <td>None</td>\n            <td>184436083777</td>\n            <td>253789061748229</td>\n        </tr>\n        <tr>\n            <td>carton</td>\n            <td>None</td>\n            <td>456410402076</td>\n            <td>253789061748229</td>\n        </tr>\n</table>\nTotal: 6 rows affected.",
        "token": "253789061748229"
      }
    ]
  },
  "253789061748229": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 10,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE`",
        ""
      ],
      [
        "`UPDATE` one row",
        ""
      ]
    ],
    "context": "So much cool stuff!\n\nYay, a coffee cup. Let's collect it!\n\n```sql\nUPDATE item\nSET owner = 20\nWHERE item = 'coffee cup'\n```",
    "statement": "Execute the `UPDATE` statement, and check the `item` table afterwards.",
    "salt": "093",
    "formula": "salt_093(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET owner = 20\nWHERE item = 'coffee cup';\n\n\nSELECT *\nFROM item",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>owner</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>bucket</td>\n            <td>None</td>\n            <td>184436083777</td>\n            <td>107025105236366</td>\n        </tr>\n        <tr>\n            <td>carton</td>\n            <td>None</td>\n            <td>456410402076</td>\n            <td>107025105236366</td>\n        </tr>\n</table>\nTotal: 9 rows affected.",
        "token": "107025105236366"
      }
    ]
  },
  "107025105236366": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 11,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE`",
        ""
      ],
      [
        "`UPDATE` several rows",
        ""
      ]
    ],
    "context": "",
    "statement": "Do you know a trick how to collect all the ownerless items? Afterwards, list all of the items you own.",
    "salt": "033",
    "formula": "salt_033(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET owner = 20\nWHERE owner IS NULL;\n\n\nSELECT item\nFROM item\nWHERE owner = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>coffee cup</td>\n            <td>139744599079637</td>\n        </tr>\n        <tr>\n            <td>bucket</td>\n            <td>139744599079637</td>\n        </tr>\n</table>\nTotal: 6 rows affected.",
        "token": "139744599079637"
      },
      {
        "query": "UPDATE item\nSET owner = 20;\n\n\nSELECT item\nFROM item",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>hammer</td>\n            <td>140217850902324</td>\n        </tr>\n        <tr>\n            <td>cane</td>\n            <td>140217850902324</td>\n        </tr>\n</table>\nTotal: 9 rows affected.",
        "token": "140217850902324"
      }
    ]
  },
  "138282073330312": {
    "kind": "hint",
    "task_number": 11,
    "text": "It seems you have failed to collect any other ownerless item. Remember: comparing to `NULL` with the `=` operator always returns... `NULL`. You need the special operator `IS` instead.",
    "query": "SELECT item\n     , salt_033(sum(nn(hash)) OVER ()) AS token\nFROM item\nWHERE item = 'coffee cup'"
  },
  "138996212731035": {
    "kind": "hint",
    "task_number": 11,
    "text": "Restrict the result to the Stranger's rows (personid: 20).",
    "query": "SELECT item\n     , salt_033(sum(nn(hash)) OVER ()) AS token\nFROM item"
  },
  "140217850902324": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 12,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE`",
        ""
      ],
      [
        "`UPDATE` several rows",
        ""
      ]
    ],
    "context": "So greedy! You've snapped up all items, even those that already had an owner.",
    "statement": "Let's give them back to their rightful owners: the cane to 5, the hammer to 2 and the rope to 17. Afterwards, list all of the items you own.",
    "salt": "025",
    "formula": "salt_025(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET owner = 5\nWHERE item = 'cane';\n\nUPDATE item\nSET owner = 2\nWHERE item = 'hammer';\n\nUPDATE item\nSET owner = 17\nWHERE item = 'rope';\n\nSELECT item\nFROM item\nWHERE owner = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>coffee cup</td>\n            <td>206054094742976</td>\n        </tr>\n        <tr>\n            <td>bucket</td>\n            <td>206054094742976</td>\n        </tr>\n</table>\nTotal: 6 rows affected.",
        "token": "206054094742976"
      }
    ]
  },
  "206054094742976": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 13,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Complex condition",
        ""
      ]
    ],
    "context": "",
    "statement": "Find a friendly inhabitant who is either a merchant or a dealer. Maybe they want to buy some of your items.",
    "salt": "024",
    "formula": "salt_024(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "intro": "With a logical `OR`.",
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND (job = 'merchant' OR job = 'dealer')",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>4</td>\n            <td>Carl Ox</td>\n            <td>1</td>\n            <td>m</td>\n            <td>merchant</td>\n            <td>250</td>\n            <td>friendly</td>\n            <td>435957500169</td>\n            <td>166940006711685</td>\n        </tr>\n        <tr>\n            <td>12</td>\n            <td>Otto Alexander</td>\n            <td>2</td>\n            <td>m</td>\n            <td>dealer</td>\n            <td>680</td>\n            <td>friendly</td>\n            <td>461779699008</td>\n            <td>166940006711685</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "166940006711685"
      },
      {
        "intro": "With the `IN` operator (recommended). A cleaner, more scalable way to check a column against multiple values.",
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job in ('merchant', 'dealer')",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>4</td>\n            <td>Carl Ox</td>\n            <td>1</td>\n            <td>m</td>\n            <td>merchant</td>\n            <td>250</td>\n            <td>friendly</td>\n            <td>435957500169</td>\n            <td>166940006711685</td>\n        </tr>\n        <tr>\n            <td>12</td>\n            <td>Otto Alexander</td>\n            <td>2</td>\n            <td>m</td>\n            <td>dealer</td>\n            <td>680</td>\n            <td>friendly</td>\n            <td>461779699008</td>\n            <td>166940006711685</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "166940006711685"
      }
    ]
  },
  "139744599079637": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 13,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Complex condition",
        ""
      ]
    ],
    "context": "",
    "statement": "Find a friendly inhabitant who is either a merchant or a dealer. Maybe they want to buy some of your items.",
    "salt": "024",
    "formula": "salt_024(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "intro": "With a logical `OR`.",
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND (job = 'merchant' OR job = 'dealer')",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>4</td>\n            <td>Carl Ox</td>\n            <td>1</td>\n            <td>m</td>\n            <td>merchant</td>\n            <td>250</td>\n            <td>friendly</td>\n            <td>435957500169</td>\n            <td>166940006711685</td>\n        </tr>\n        <tr>\n            <td>12</td>\n            <td>Otto Alexander</td>\n            <td>2</td>\n            <td>m</td>\n            <td>dealer</td>\n            <td>680</td>\n            <td>friendly</td>\n            <td>461779699008</td>\n            <td>166940006711685</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "166940006711685"
      },
      {
        "intro": "With the `IN` operator (recommended). A cleaner, more scalable way to check a column against multiple values.",
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job in ('merchant', 'dealer')",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>4</td>\n            <td>Carl Ox</td>\n            <td>1</td>\n            <td>m</td>\n            <td>merchant</td>\n            <td>250</td>\n            <td>friendly</td>\n            <td>435957500169</td>\n            <td>166940006711685</td>\n        </tr>\n        <tr>\n            <td>12</td>\n            <td>Otto Alexander</td>\n            <td>2</td>\n            <td>m</td>\n            <td>dealer</td>\n            <td>680</td>\n            <td>friendly</td>\n            <td>461779699008</td>\n            <td>166940006711685</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "166940006711685"
      }
    ]
  },
  "163024011428056": {
    "kind": "hint",
    "task_number": 13,
    "text": "Your result include one evil villager. Use both `AND` and `OR`, and don't forget to put the brackets correctly.",
    "query": "SELECT *\n     , salt_024(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly' AND job = 'merchant'\n    OR job = 'dealer'"
  },
  "158940675065632": {
    "kind": "hint",
    "task_number": 13,
    "text": "You have found inhabitants who are either friendly, or dealers, or merchants, but \"friendly\" is not an option.",
    "query": "SELECT *\n     , salt_024(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly'\n    OR job = 'dealer'\n    OR job = 'merchant'"
  },
  "166516902594714": {
    "kind": "hint",
    "task_number": 13,
    "text": "Include the friendly merchants too.",
    "query": "SELECT *\n     , salt_024(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly' AND job = 'dealer'"
  },
  "165468115894776": {
    "kind": "hint",
    "task_number": 13,
    "text": "Include the friendly dealers too.",
    "query": "SELECT *\n     , salt_024(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE state = 'friendly' AND job = 'merchant'"
  },
  "166940006711685": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 14,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE` two rows",
        ""
      ]
    ],
    "context": "– I'd like to get the ring and the teapot. The rest is nothing but scrap. Please give me the two items. My `personid` is 15.",
    "statement": "Afterwards, check the items that she owns.",
    "salt": "034",
    "formula": "salt_034(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET owner = 15\nWHERE item IN ('ring', 'teapot');\n\n\nSELECT *\nFROM item\nWHERE owner = 15",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>owner</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>ring</td>\n            <td>15</td>\n            <td>972837695337</td>\n            <td>261661938333343</td>\n        </tr>\n        <tr>\n            <td>teapot</td>\n            <td>15</td>\n            <td>503611185415</td>\n            <td>261661938333343</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "261661938333343"
      }
    ]
  },
  "261661938333343": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 15,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Transfer some gold",
        ""
      ]
    ],
    "context": "— Thank you! Here, some gold!",
    "statement": "Transfer 120 from Helen's gold to yours, and then check the new amounts of your two rows.\n\n_Tip._ SQL has no “transfer” operation. Use two `UPDATE` statements.",
    "salt": "091",
    "formula": "salt_091(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold - 120\nWHERE personid = 15;\n\n\nUPDATE inhabitant\nSET gold = gold + 120\nWHERE personid = 20;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Helen Grasshead</td>\n            <td>560</td>\n            <td>33454360073749</td>\n        </tr>\n        <tr>\n            <td>Stranger</td>\n            <td>120</td>\n            <td>33454360073749</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "33454360073749"
      },
      {
        "query": "UPDATE inhabitant\nSET gold = gold - 120\nWHERE personid = 15;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Helen Grasshead</td>\n            <td>560</td>\n            <td>33486899158028</td>\n        </tr>\n        <tr>\n            <td>Stranger</td>\n            <td>0</td>\n            <td>33486899158028</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "33486899158028"
      },
      {
        "query": "UPDATE inhabitant\nSET gold = gold + 120\nWHERE personid = 20;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Helen Grasshead</td>\n            <td>680</td>\n            <td>33458254442206</td>\n        </tr>\n        <tr>\n            <td>Stranger</td>\n            <td>120</td>\n            <td>33458254442206</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "33458254442206"
      }
    ]
  },
  "24023835813788": {
    "kind": "hint",
    "task_number": 15,
    "text": "Restrict the result to the row of Helen (15) and yours (20).",
    "query": "SELECT name\n     , gold\n     , salt_091(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nLIMIT 1"
  },
  "24056167280055": {
    "kind": "hint",
    "task_number": 15,
    "text": "Restrict the result to the row of Helen (15) and yours (20).",
    "query": "SELECT name\n     , gold\n     , salt_091(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nlimit 1"
  },
  "24026656455753": {
    "kind": "hint",
    "task_number": 15,
    "text": "Restrict the result to the row of Helen (15) and yours (20).",
    "query": "SELECT name\n     , gold\n     , salt_091(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nlimit 1",
    "salt": "091"
  },
  "33486899158028": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 16,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Transfer some gold",
        ""
      ]
    ],
    "context": "",
    "statement": "You have correctly updated Helen's gold. Now update yours.",
    "salt": "075",
    "formula": "salt_075(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold + 120\nWHERE personid = 20;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Helen Grasshead</td>\n            <td>680</td>\n            <td>36634440878275</td>\n        </tr>\n        <tr>\n            <td>Stranger</td>\n            <td>240</td>\n            <td>36634440878275</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "36634440878275"
      }
    ]
  },
  "33458254442206": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 17,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Transfer some gold",
        ""
      ]
    ],
    "context": "",
    "statement": "You have correctly updated your gold. Now update Helen's.",
    "salt": "076",
    "formula": "salt_076(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold - 120\nWHERE personid = 15;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Helen Grasshead</td>\n            <td>560</td>\n            <td>12496616506700</td>\n        </tr>\n        <tr>\n            <td>Stranger</td>\n            <td>240</td>\n            <td>12496616506700</td>\n        </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "12496616506700"
      }
    ]
  },
  "36634440878275": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 18,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE` the name of the stranger",
        ""
      ]
    ],
    "context": "Unfortunately, that's not enough gold to buy a sword. Seems like I do have to work after all. Maybe it's not a bad idea to change my name from Stranger to my real name before I will apply for a job.",
    "statement": "Update your name to 'Leslie Qualls' and show the updated row.",
    "salt": "080",
    "formula": "salt_080(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET name = 'Leslie Qualls'\nWHERE personid = 20;\n\n\nSELECT *\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>20</td>\n            <td>Leslie Qualls</td>\n            <td>1</td>\n            <td>?</td>\n            <td>?</td>\n            <td>240</td>\n            <td>?</td>\n            <td>793987966137</td>\n            <td>18336198393759</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "18336198393759"
      }
    ]
  },
  "12496616506700": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 18,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE` the name of the stranger",
        ""
      ]
    ],
    "context": "Unfortunately, that's not enough gold to buy a sword. Seems like I do have to work after all. Maybe it's not a bad idea to change my name from Stranger to my real name before I will apply for a job.",
    "statement": "Update your name to 'Leslie Qualls' and show the updated row.",
    "salt": "080",
    "formula": "salt_080(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET name = 'Leslie Qualls'\nWHERE personid = 20;\n\n\nSELECT *\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>20</td>\n            <td>Leslie Qualls</td>\n            <td>1</td>\n            <td>?</td>\n            <td>?</td>\n            <td>240</td>\n            <td>?</td>\n            <td>793987966137</td>\n            <td>18336198393759</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "18336198393759"
      }
    ]
  },
  "33454360073749": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 18,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`UPDATE` the name of the stranger",
        ""
      ]
    ],
    "context": "Unfortunately, that's not enough gold to buy a sword. Seems like I do have to work after all. Maybe it's not a bad idea to change my name from Stranger to my real name before I will apply for a job.",
    "statement": "Update your name to 'Leslie Qualls' and show the updated row.",
    "salt": "080",
    "formula": "salt_080(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET name = 'Leslie Qualls'\nWHERE personid = 20;\n\n\nSELECT *\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>20</td>\n            <td>Leslie Qualls</td>\n            <td>1</td>\n            <td>?</td>\n            <td>?</td>\n            <td>240</td>\n            <td>?</td>\n            <td>793987966137</td>\n            <td>18336198393759</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "18336198393759"
      }
    ]
  },
  "29925361564672": {
    "kind": "hint",
    "task_number": 18,
    "text": "Restrict the result to your row (20).",
    "query": "SELECT *\n     , salt_080(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nlimit 1"
  },
  "18322049360738": {
    "kind": "hint",
    "task_number": 18,
    "text": "The name Qualls contains two 'l's.",
    "query": "UPDATE inhabitant\nSET name = 'Leslie Quals'\nWHERE personid = 20;\n\n\nSELECT *\n     , salt_080(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE personid = 20"
  },
  "18336198393759": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 19,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`ORDER BY`",
        ""
      ]
    ],
    "context": "",
    "statement": "Since baking is one of your hobbies, why not find a baker who you can work for?\n\n_Tip._ List all bakers and use `ORDER BY` gold to sort the results. `ORDER BY` gold `DESC` is even better because then the richest baker is on top.",
    "salt": "078",
    "formula": "salt_078((0) + sum(nn(hash)) OVER ()) AS token",
    "tweak": "gold on the last row",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE job = 'baker'\nORDER BY gold DESC",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Paul Bakerman</td>\n            <td>1</td>\n            <td>m</td>\n            <td>baker</td>\n            <td>850</td>\n            <td>friendly</td>\n            <td>894147374131</td>\n            <td>30928237956525</td>\n        </tr>\n        <tr>\n            <td>9</td>\n            <td>Tiffany Drummer</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>550</td>\n            <td>evil</td>\n            <td>777224738827</td>\n            <td>30928237956525</td>\n        </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "30928237956525"
      }
    ],
    "tweak_javascript": "result[0][result[0].length - 1]"
  },
  "30928237956437": {
    "kind": "hint",
    "task_number": 19,
    "text": "Don't forget to sort the result by decreasing gold.",
    "query": "SELECT *\n     , salt_078({{x}} + sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE job = 'baker'"
  },
  "30928237956025": {
    "kind": "hint",
    "task_number": 19,
    "text": "The gold must be sorted by decreasing order.",
    "query": "SELECT *\n     , salt_078({{x}} + sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE job = 'baker'\nORDER BY gold"
  },
  "30928237956875": {
    "kind": "hint",
    "task_number": 19,
    "text": "Don't forget to update the token formula.",
    "query": "SELECT *\n     , salt_078(0 + sum(nn(hash)) OVER ()) AS token\nFROM inhabitant\nWHERE job = 'baker'"
  },
  "30928237956525": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 20,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`ORDER BY`",
        ""
      ]
    ],
    "context": "Aha, Paul! I know him!\n\n– Hi, you again! I saw you want to work as a baker? Okay! You will be paid 1 gold for 100 bread rolls.\n\n(8 hours later...)\n\n– Here, I made ten thousand bread rolls! I quit! This should be enough money to buy a sword. Let's see what happens with my gold balance.\n\nHere's your new sword, Losloo Qoolls! Now you can go everywhere.",
    "statement": "Transfer your salary (100) from Paul's gold to yours, and substract the price of the sword (150). Then, display your gold balance.",
    "salt": "010",
    "formula": "salt_010(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold - 100\nWHERE personid = 1;\n\n\nUPDATE inhabitant\nSET gold = gold + 100 - 150\nWHERE personid = 20;\n\n\nSELECT gold\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>gold</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>190</td>\n            <td>156356238644044</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "156356238644044"
      }
    ]
  },
  "156356238644044": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 21,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`ORDER BY`",
        ""
      ]
    ],
    "context": "– My name is Leslie qualls! Thanks anyway!",
    "statement": "Is there a pilot on this island by any chance? He could fly you home.",
    "salt": "086",
    "formula": "salt_086(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE job = 'pilot'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>8</td>\n            <td>Arthur Tailor</td>\n            <td>2</td>\n            <td>m</td>\n            <td>pilot</td>\n            <td>490</td>\n            <td>kidnapped</td>\n            <td>526020225000</td>\n            <td>228770217179253</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "228770217179253"
      }
    ]
  },
  "228770217179253": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 22,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Joins",
        ""
      ]
    ],
    "context": "Oh no, his state is 'kidnapped'.\n\nHorrible, the pilot is held captive by Dirty Dieter! I will show you a trick how to find out the name of the village where Dirty Dieter lives.\n\n```sql\nSELECT A.name\nFROM village A\nJOIN inhabitant B ON A.villageid = B.villageid\nWHERE B.name = 'Dirty Dieter'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "029",
    "formula": "salt_029(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token",
    "solutions": [
      "The expression presented here is called a join. It combines the information of the `inhabitant`\ntable with information of the `village` table by matching `villageid` values.",
      {
        "query": "SELECT A.name\nFROM village A\nJOIN inhabitant B ON A.villageid = B.villageid\nWHERE B.name = 'Dirty Dieter'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Onionville</td>\n            <td>256500123076880</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "256500123076880"
      },
      {
        "intro": "Variant. Implicit JOIN. You may encounter a syntax where the join conditions are mixed with the filter conditions. This can make the query harder to understand, especially as the number of tables and conditions increases. While this method is still supported for backward compatibility, it is generally considered outdated. The explicit JOIN syntax is recommended for new SQL code.",
        "query": "SELECT A.name\nFROM village A, inhabitant B\nWHERE A.villageid = B.villageid\n  AND B.name = 'Dirty Dieter'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Onionville</td>\n            <td>256500123076880</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "256500123076880"
      }
    ]
  },
  "256500123076880": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 23,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Joins",
        ""
      ]
    ],
    "context": "– Thanks for the hint!",
    "statement": "Use the join to find out the chief's name of the village Onionville.\n\n_Tip._ In the column `chief` in the village table, the `personid` of the chief is stored.",
    "salt": "045",
    "formula": "salt_045(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT B.name\nFROM village A\nJOIN inhabitant B ON A.chief = B.personid\nWHERE A.name = 'Onionville'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Fred Dix</td>\n            <td>241491762019151</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "241491762019151"
      }
    ]
  },
  "237566676404939": {
    "kind": "hint",
    "task_number": 23,
    "text": "We are only interested in the chief of Onionville.",
    "query": "SELECT B.name\n     , salt_045(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token\nFROM village A\nJOIN inhabitant B ON A.chief = B.personid"
  },
  "227797463040767": {
    "kind": "hint",
    "task_number": 23,
    "text": "Don't forget the join condition (`ON ...`). Without it, you make a cartesian product.",
    "query": "SELECT B.name\n     , salt_045(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token\nFROM village A, inhabitant B\nWHERE A.name = 'Onionville'"
  },
  "241491762019151": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 24,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`COUNT(*)`",
        ""
      ]
    ],
    "context": "I've got it! I will visit Fred and ask him about Dirty Dieter and the pilot.\n\nUm, how many inhabitants does Onionville have?\n\n```sql\nSELECT COUNT(*) as population\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Onionville'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "012",
    "formula": "salt_012(bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT count(*) AS population\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Onionville'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>population</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>8</td>\n            <td>229606212629141</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "229606212629141"
      }
    ]
  },
  "229606212629141": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 25,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`COUNT(*)`",
        ""
      ]
    ],
    "context": "– Hello Leslie Qualls, the pilot is held captive by Dirty Dieter in his sister's house.",
    "statement": "Shall I tell you how many women there are in Onionville? Nah, you can figure it out by yourself!\n\n_Tip._ Women show up as gender = 'f'.",
    "salt": "032",
    "formula": "salt_032((0) + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "tweak": "this number",
    "solutions": [
      {
        "query": "SELECT count(*) AS women\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\n    AND B.name = 'Onionville'\n    AND gender = 'f'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>women</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>41770464086333</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "41770464086333"
      }
    ],
    "tweak_javascript": "result[0][0]"
  },
  "48641777669212": {
    "kind": "hint",
    "task_number": 25,
    "text": "This is the population of Onionville. We are only interested in its women.",
    "query": "SELECT count(*) AS women\n     , salt_032({{x}} + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Onionville'"
  },
  "38837902977585": {
    "kind": "hint",
    "task_number": 25,
    "text": "This is the total number of women. We are only interested in those of Onionville.",
    "query": "SELECT count(*) AS women\n     , salt_032({{x}} + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND gender = 'f'"
  },
  "37919585688127": {
    "kind": "hint",
    "task_number": 25,
    "text": "Don't forget the join condition (`ON ...`).",
    "query": "SELECT count(*) AS women\n     , salt_032({{x}} + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token\nFROM inhabitant A, village B\nWHERE gender = 'f'\n    AND B.name = 'Onionville'"
  },
  "41770464086333": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 26,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`COUNT(*)`",
        ""
      ]
    ],
    "context": "Oh, only one woman.",
    "statement": "What's her name?",
    "salt": "036",
    "formula": "salt_036(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT A.name\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Onionville'\n    AND gender = 'f'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Dirty Diane</td>\n            <td>124254928334508</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "124254928334508"
      }
    ]
  },
  "131587263483309": {
    "kind": "hint",
    "task_number": 26,
    "text": "Restrict the result to Onionville.",
    "query": "SELECT A.name\n     , salt_036(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE gender = 'f'"
  },
  "132776239100886": {
    "kind": "hint",
    "task_number": 26,
    "text": "Restrict the result to the women.",
    "query": "SELECT A.name\n     , salt_036(sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Onionville'"
  },
  "124254928334508": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 27,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`SUM()`",
        ""
      ]
    ],
    "context": "Let's go!\n\n– Leslie Qualls, if you hand me over the entire property of our nearby village Cucumbertown, I will release the pilot. I will show you now what this property consists of.\n\n```sql\nSELECT SUM(A.gold) as total\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Cucumbertown'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "035",
    "formula": "salt_035(bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT sum(A.gold) AS total\nFROM inhabitant A\nJOIN village B ON A.villageid = B.villageid\nWHERE B.name = 'Cucumbertown'",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>total</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>8860</td>\n            <td>158000323613499</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "158000323613499"
      }
    ]
  },
  "158000323613499": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 28,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`SUM()`",
        ""
      ]
    ],
    "context": "Oh no, baking bread alone can't solve my problems. If I continue working and selling items though, I could earn more gold than the worth of gold inventories of all bakers, dealers and merchants together.",
    "statement": "Sum the gold of all these people.",
    "salt": "046",
    "formula": "salt_046((0) + bit_xor(sum(nn(hash))) OVER ()) AS token",
    "tweak": "this sum",
    "solutions": [
      {
        "query": "SELECT sum(inhabitant.gold) AS total\nFROM inhabitant\nWHERE job IN ('baker', 'dealer', 'merchant')",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>total</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>3910</td>\n            <td>208022858214383</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "208022858214383"
      }
    ],
    "tweak_javascript": "result[0][0]"
  },
  "197442822264005": {
    "kind": "hint",
    "task_number": 28,
    "text": "Restrict your queries to the bakers, dealers and merchants together.",
    "query": "SELECT sum(inhabitant.gold) AS total\n     , salt_046({{x}} + bit_xor(sum(nn(hash))) OVER ()) AS token\nFROM inhabitant"
  },
  "208022858214383": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 29,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`AVG()`",
        ""
      ]
    ],
    "context": "That's not enough.\n\nLet's have a look at how much average gold people own, depending on their job.\n\n```sql\nSELECT job, avg(gold)\nFROM inhabitant\nGROUP BY job\nORDER BY avg(gold)\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "071",
    "formula": "salt_071(bit_xor(sum(nn(hash))) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT job\n     , avg(gold) AS average\nFROM inhabitant\nGROUP BY job\nORDER BY average",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>job</th>\n            <th>average</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>farmer</td>\n            <td>10.0000000000000000</td>\n            <td>228039061975856</td>\n        </tr>\n        <tr>\n            <td>?</td>\n            <td>190.0000000000000000</td>\n            <td>228039061975856</td>\n        </tr>\n</table>\nTotal: 11 rows affected.",
        "token": "228039061975856"
      }
    ]
  },
  "228039061975856": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 30,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`DELETE`",
        ""
      ]
    ],
    "context": "Ok, so the only way is to mug the villains. Or I might as well go ahead and just kill Dirty Dieter with my sword!\n\n```sql\nDELETE\nFROM inhabitant\nWHERE name = 'Dirty Dieter'\n```",
    "statement": "Execute the previous statement. Which item is now ownerless?",
    "salt": "018",
    "formula": "salt_018(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "DELETE\nFROM inhabitant\nWHERE name = 'Dirty Dieter';\n\n\nSELECT item\nFROM item\nWHERE owner IS NULL",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>item</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>cane</td>\n            <td>193891994785434</td>\n        </tr>\n</table>\nTotal: 1 row affected.",
        "token": "193891994785434"
      }
    ]
  },
  "193891994785434": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 31,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "`DELETE`",
        ""
      ]
    ],
    "context": "Dirty Diane: Heeeey! Now I'm very angry!\n\nWhat will you do next, Leslie Qualls?",
    "statement": "Delete Dirty Diane, and show the remaining inhabitants of Onionville (villageid 3).",
    "salt": "004",
    "formula": "salt_004(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "DELETE\nFROM inhabitant\nWHERE name = 'Dirty Diane';\n\n\nSELECT *\nFROM inhabitant\nWHERE villageid = 3",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>59998173561476</td>\n        </tr>\n        <tr>\n            <td>7</td>\n            <td>Peter Slaughterer</td>\n            <td>3</td>\n            <td>m</td>\n            <td>butcher</td>\n            <td>3250</td>\n            <td>evil</td>\n            <td>149631755589</td>\n            <td>59998173561476</td>\n        </tr>\n</table>\nTotal: 6 rows affected.",
        "token": "59998173561476"
      }
    ]
  },
  "66688187831573": {
    "kind": "hint",
    "task_number": 31,
    "text": "Restrict the result to the village of Onionville.",
    "query": "SELECT *\n     , salt_004(sum(nn(hash)) OVER ()) AS token\nFROM inhabitant"
  },
  "59998173561476": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 32,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "– Yeah! Now I release the pilot!<br>\n– Thank's for releasing me, Leslie Qualls! I will fly you home!<br>\n– I take my sword, some gold and lots of useless items with me as a souvenir.",
    "statement": "Change the pilot's status to 'friendly', your own status to 'emigrated', and show the table `inhabitant`.",
    "salt": "051",
    "formula": "salt_051(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET state = 'friendly'\nWHERE job = 'pilot';\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>226496379089034</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Rita Ox</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>350</td>\n            <td>friendly</td>\n            <td>551997830527</td>\n            <td>226496379089034</td>\n        </tr>\n</table>\nTotal: 18 rows affected.",
        "token": "226496379089034"
      },
      {
        "query": "UPDATE inhabitant\nSET state = 'emigrated'\nWHERE personid = 20;\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>225990166488874</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Rita Ox</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>350</td>\n            <td>friendly</td>\n            <td>551997830527</td>\n            <td>225990166488874</td>\n        </tr>\n</table>\nTotal: 18 rows affected.",
        "token": "225990166488874"
      },
      {
        "query": "UPDATE inhabitant\nSET state = 'emigrated'\nWHERE personid = 20;\n\n\nUPDATE inhabitant\nSET state = 'friendly'\nWHERE job = 'pilot';\n\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>226135318816776</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Rita Ox</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>350</td>\n            <td>friendly</td>\n            <td>551997830527</td>\n            <td>226135318816776</td>\n        </tr>\n</table>\nTotal: 18 rows affected.",
        "token": "226135318816776"
      }
    ]
  },
  "226496379089034": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 33,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "",
    "statement": "You have correctly updated the pilot's status. Now update yours to 'emigrated', and show the table `inhabitant`.",
    "salt": "052",
    "formula": "salt_052(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET state = 'emigrated'\nWHERE personid = 20;\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>254055169129857</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Rita Ox</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>350</td>\n            <td>friendly</td>\n            <td>551997830527</td>\n            <td>254055169129857</td>\n        </tr>\n</table>\nTotal: 18 rows affected.",
        "token": "254055169129857"
      }
    ]
  },
  "225990166488874": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 34,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "",
    "statement": "You have correctly updated your status. Now update the pilot's state to 'friendly', and show the table `inhabitant`.",
    "salt": "053",
    "formula": "salt_053(sum(nn(hash)) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET state = 'friendly'\nWHERE job = 'pilot';\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <thead>\n        <tr>\n            <th>personid</th>\n            <th>name</th>\n            <th>villageid</th>\n            <th>gender</th>\n            <th>job</th>\n            <th>gold</th>\n            <th>state</th>\n            <th>hash</th>\n            <th>token</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2</td>\n            <td>Ernest Perry</td>\n            <td>3</td>\n            <td>m</td>\n            <td>weaponsmith</td>\n            <td>280</td>\n            <td>friendly</td>\n            <td>447643847988</td>\n            <td>149613783694257</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Rita Ox</td>\n            <td>1</td>\n            <td>f</td>\n            <td>baker</td>\n            <td>350</td>\n            <td>friendly</td>\n            <td>551997830527</td>\n            <td>149613783694257</td>\n        </tr>\n</table>\nTotal: 18 rows affected.",
        "token": "149613783694257"
      }
    ]
  },
  "254055169129857": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 35,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "You have completed SQLab Island. What a big adventure!",
    "statement": "",
    "salt": "049",
    "solutions": []
  },
  "149613783694257": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 35,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "You have completed SQLab Island. What a big adventure!",
    "statement": "",
    "salt": "049",
    "solutions": []
  },
  "226135318816776": {
    "part_number": 1,
    "kind": "episode",
    "task_number": 35,
    "section_path": [
      [
        "SQLab Island",
        ""
      ],
      [
        "Epilog",
        ""
      ]
    ],
    "context": "You have completed SQLab Island. What a big adventure!",
    "statement": "",
    "salt": "049",
    "solutions": []
  }
}